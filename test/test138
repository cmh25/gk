1 atan2 2
1 atan2 2 3
1 2 atan2 3
1 2 atan2 3 4

1.0 atan2 2
1.0 atan2 2 3
1 2.0 atan2 3
1 2.0 atan2 3 4

1 atan2 2.0
1 atan2 2 3.0
1 2 atan2 3.0
1 2 atan2 3 4.0

1.0 atan2 2.0
1.0 atan2 2 3.0
1 2.0 atan2 3.0
1 2.0 atan2 3 4.0

/1 atan2 (2;3.0)  / e doesn't normalize the result here. ex: (0.4636476;0.3217506)
/(1;2.0) atan2 3
/1.0 atan2 (2;3.0)
/(1;2.0) atan2 3.0
/(1;2.0) atan2 (3;4.0)

10 div 2
"asdf"
0I div 2
10 div 0I
0N div 2
/10 div 0N        / e gives -1 vs 0
/-0I div 2        / e gives -1073741824 vs -1073741823
/10 div -0I       / e gives -1 vs 0
0N div 0N
/0N div 0I        / e gives -2 vs -1
0N div -0I
/0I div 0N        / e gives -1 vs 0
0I div 0I
0I div -0I
-0I div 0N
-0I div 0I
-0I div -0I
/10 div 2 3        / e throws a type error if any operands to div are integer vectors
/10 20 div 3
/10 20 div 3 4

1 and 2
1 and 2 4
1 2 and 4
1 2 and 4 8
0I and 2
0N and 2
-0I and 2
0I and 2 4
0N and 2 4
-0I and 2 4
0I and 0I
0I and 0N
0I and -0I
0N and 0I
0N and 0N
0N and -0I
-0I and 0I
-0I and 0N
-0I and -0I

1 or 2
1 or 2 4
1 2 or 4
1 2 or 4 8
0I or 2
0N or 2
-0I or 2
0I or 2 4
0N or 2 4
-0I or 2 4
0I or 0I
0I or 0N
0I or -0I
0N or 0I
0N or 0N
0N or -0I
-0I or 0I
-0I or 0N
-0I or -0I

1 xor 3
1 xor 3 4
1 2 xor 3
1 2 xor 3 8
0I xor 2
0N xor 2
-0I xor 2
0I xor 2 4
0N xor 2 4
-0I xor 2 4
0I xor 0I
0I xor 0N
0I xor -0I
0N xor 0I
0N xor 0N
0N xor -0I
-0I xor 0I
-0I xor 0N
-0I xor -0I

not 1
not 1 2
not 0I
not 0N
not -0I

1 rot 3
8 rot -3
1 rot 1 2 3
2 4 8 rot -1 -2 -3
1 rot 0I
1 rot 0N
1 rot -0I
0I rot 1
/0N rot 1             / e gives 1 vs -1
/-0I rot 1            / e gives 3 vs -1

1 shift 3
8 shift -3
1 shift 1 2 3
2 4 8 shift -1 -2 -3
1 shift 0I
1 shift 0N
1 shift -0I
0I shift 1
0N shift 1
-0I shift 1

atan2[1;2]
atan2[1;2 3]
atan2[1 2;3]
atan2[1 2;3 4]

atan2[1.0;2]
atan2[1.0;2 3]
atan2[1 2.0;3]
atan2[1 2.0;3 4]

atan2[1;2.0]
atan2[1;2 3.0]
atan2[1 2;3.0]
atan2[1 2;3 4.0]

atan2[1.0;2.0]
atan2[1.0;2 3.0]
atan2[1 2.0;3.0]
atan2[1 2.0;3 4.0]

/atan2[1;(2;3.0)]  / e doesn't normalize the result here. ex: (0.4636476;0.3217506)
/atan2[(1;2.0);3]
/atan2[1.0;(2;3.0)]
/atan2[(1;2.0);3.0]
/atan2[(1;2.0);(3;4.0)]

div[10;2]
div[0I;2]
div[10;0I]
div[0N;2]
/div[10;0N]        / e gives -1 vs 0
/div[-0I;2]        / e gives -1073741824 vs -1073741823
/div[10;-0I]       / e gives -1 vs 0
div[0N;0N]
/div[0N;0I]        / e gives -2 vs -1
div[0N;-0I]
/div[0I;0N]        / e gives -1 vs 0
div[0I;0I]
div[0I;-0I]
div[-0I;0N]
div[-0I;0I]
div[-0I;-0I]
/div[10;2 3]        / e throws a type error if any operands to div are integer vectors
/div[10 20;3]
/div[10 20;3 4]

and[1;2]
and[1;2 4]
and[1 2;4]
and[1 2;4 8]
and[0I;2]
and[0N;2]
and[-0I;2]
and[0I;2 4]
and[0N;2 4]
and[-0I;2 4]
and[0I;0I]
and[0I;0N]
and[0I;-0I]
and[0N;0I]
and[0N;0N]
and[0N;-0I]
and[-0I;0I]
and[-0I;0N]
and[-0I;-0I]

or[1;2]
or[1;2 4]
or[1 2;4]
or[1 2;4 8]
or[0I;2]
or[0N;2]
or[-0I;2]
or[0I;2 4]
or[0N;2 4]
or[-0I;2 4]
or[0I;0I]
or[0I;0N]
or[0I;-0I]
or[0N;0I]
or[0N;0N]
or[0N;-0I]
or[-0I;0I]
or[-0I;0N]
or[-0I;-0I]

xor[1;3]
xor[1;3 4]
xor[1 2;3]
xor[1 2;3 8]
xor[0I;2]
xor[0N;2]
xor[-0I;2]
xor[0I;2 4]
xor[0N;2 4]
xor[-0I;2 4]
xor[0I;0I]
xor[0I;0N]
xor[0I;-0I]
xor[0N;0I]
xor[0N;0N]
xor[0N;-0I]
xor[-0I;0I]
xor[-0I;0N]
xor[-0I;-0I]

not[1]
not[1 2]
not[0I]
not[0N]
not[-0I]

rot[1;3]
rot[8;-3]
rot[1;1 2 3]
rot[2 4 8;-1 -2 -3]
rot[1;0I]
rot[1;0N]
rot[1;-0I]
rot[0I;1]
/rot[0N;1]             / e gives 1 vs -1
/rot[-0I;1]            / e gives 3 vs -1

shift[1;3]
shift[8;-3]
shift[1;1 2 3]
shift[2 4 8;-1 -2 -3]
shift[1;0I]
shift[1;0N]
shift[1;-0I]
shift[0I;1]
shift[0N;1]
shift[-0I;1]

\\
